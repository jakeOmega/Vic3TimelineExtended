space_elevator_construction = {
	if = {
		limit = {
			NOT = { has_variable = space_elevator_progress_var }
		}
		set_variable = {
			name = space_elevator_progress_var
			value = 0
		}
	}
	if = {
		limit = {
			has_variable = space_elevator_progress_var
			any_scope_building = {
				is_building_type = building_space_elevator_construction_site
				building_has_goods_shortage = no
			}
		}
		change_variable = {
			name = space_elevator_progress_var
			add = {
				value = b:building_space_elevator_construction_site.occupancy
				divide = 12
				if = {
					limit = {
						any_scope_building = { has_active_production_method = pm_space_elevator_construction_slow }
					}
					multiply = 0.25
				}
				else_if = {
					limit = {
						any_scope_building = { has_active_production_method = pm_space_elevator_construction_medium }
					}
					multiply = 0.5
				}
				else_if = {
					limit = {
						any_scope_building = { has_active_production_method = pm_space_elevator_construction_fast }
					}
					multiply = 1
				}
				else = {
					multiply = 0
				}
				multiply = 1000
				ceiling = yes
				divide = 1000
			}
		}
	}
	if = {
		limit = {
			var:space_elevator_progress_var >= 1
		}
		set_variable = {
			name = space_elevator_progress_var
			value = 0
		}
		remove_building = building_space_elevator_construction_site
		if = {
			limit = { has_building = building_space_elevator }
			switch = {
                trigger = b:building_space_elevator.level
				1 = {create_building = { building = building_space_elevator level = 2}}
				2 = {create_building = { building = building_space_elevator level = 3}}
				3 = {create_building = { building = building_space_elevator level = 4}}
				4 = {create_building = { building = building_space_elevator level = 5}}
				5 = {create_building = { building = building_space_elevator level = 6}}
				6 = {create_building = { building = building_space_elevator level = 7}}
				7 = {create_building = { building = building_space_elevator level = 8}}
				8 = {create_building = { building = building_space_elevator level = 9}}
				9 = {create_building = { building = building_space_elevator level = 10}}
				10 = {create_building = { building = building_space_elevator level = 11}}
				11 = {create_building = { building = building_space_elevator level = 12}}
				12 = {create_building = { building = building_space_elevator level = 13}}
				13 = {create_building = { building = building_space_elevator level = 14}}
				14 = {create_building = { building = building_space_elevator level = 15}}
				15 = {create_building = { building = building_space_elevator level = 16}}
				16 = {create_building = { building = building_space_elevator level = 17}}
				17 = {create_building = { building = building_space_elevator level = 18}}
				18 = {create_building = { building = building_space_elevator level = 19}}
				19 = {create_building = { building = building_space_elevator level = 20}}
			}
		}
		else = {
			create_building = {
				building = building_space_elevator
				level = 1
			}
		}
	}
}

thought_control_loyalists_update = {
	if = {
		limit = {
			owner = {
				modifier:country_monthly_loyalists_add > 0
			}
		}
		every_scope_state = {
			limit = { is_incorporated = yes }
			add_loyalists_in_state = {
				value = ROOT.modifier:country_monthly_loyalists_add
			}
		}
	}
}

expand_building_private_construction = {
	if = {
		limit = { is_building_type = building_textile_mills }
		state = { start_privately_funded_building_construction = building_textile_mills }
	}
	else_if = {
		limit = { is_building_type = building_furniture_manufacturies }
		state = { start_privately_funded_building_construction = building_furniture_manufacturies }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants }
		state = { start_privately_funded_building_construction = building_synthetics_plants }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_silk }
		state = { start_privately_funded_building_construction = building_synthetics_plants_silk }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_oil }
		state = { start_privately_funded_building_construction = building_synthetics_plants_oil }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_rubber }
		state = { start_privately_funded_building_construction = building_synthetics_plants_rubber }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_opium }
		state = { start_privately_funded_building_construction = building_synthetics_plants_opium }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_coal }
		state = { start_privately_funded_building_construction = building_synthetics_plants_coal }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_wood }
		state = { start_privately_funded_building_construction = building_synthetics_plants_wood }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_sugar }
		state = { start_privately_funded_building_construction = building_synthetics_plants_sugar }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_meat }
		state = { start_privately_funded_building_construction = building_synthetics_plants_meat }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_fruit }
		state = { start_privately_funded_building_construction = building_synthetics_plants_fruit }
	}
	else_if = {
		limit = { is_building_type = building_synthetics_plants_drinks }
		state = { start_privately_funded_building_construction = building_synthetics_plants_drinks }
	}
	else_if = {
		limit = { is_building_type = building_chemical_plants }
		state = { start_privately_funded_building_construction = building_chemical_plants }
	}
	else_if = {
		limit = { is_building_type = building_explosives_factory }
		state = { start_privately_funded_building_construction = building_explosives_factory }
	}
	else_if = {
		limit = { is_building_type = building_motor_industry }
		state = { start_privately_funded_building_construction = building_motor_industry }
	}
	else_if = {
		limit = { is_building_type = building_car_industry }
		state = { start_privately_funded_building_construction = building_car_industry }
	}
	else_if = {
		limit = { is_building_type = building_electrics_industry }
		state = { start_privately_funded_building_construction = building_electrics_industry }
	}
	else_if = {
		limit = { is_building_type = building_electrics_industry_radio }
		state = { start_privately_funded_building_construction = building_electrics_industry_radio }
	}
	else_if = {
		limit = { is_building_type = building_electrics_industry_appliances }
		state = { start_privately_funded_building_construction = building_electrics_industry_appliances }
	}
	if = {
		limit = { is_building_type = building_power_plant }
		state = { start_privately_funded_building_construction = building_power_plant }
	}
	else_if = {
		limit = { is_building_type = building_war_machine_industry }
		state = { start_privately_funded_building_construction = building_war_machine_industry }
	}
	else_if = {
		limit = { is_building_type = building_aeroplanes_industry }
		state = { start_privately_funded_building_construction = building_aeroplanes_industry }
	}
	else_if = {
		limit = { is_building_type = building_software_industry }
		state = { start_privately_funded_building_construction = building_software_industry }
	}
	else_if = {
		limit = { is_building_type = building_network_infrastructure }
		state = { start_privately_funded_building_construction = building_network_infrastructure }
	}
	else_if = {
		limit = { is_building_type = building_nuclear_plant }
		state = { start_privately_funded_building_construction = building_nuclear_plant }
	}
	else_if = {
		limit = { is_building_type = building_fusion_plant }
		state = { start_privately_funded_building_construction = building_fusion_plant }
	}
	else_if = {
		limit = { is_building_type = building_renewable_energy_plant }
		state = { start_privately_funded_building_construction = building_renewable_energy_plant }
	}
	else_if = {
		limit = { is_building_type = building_electronic_components_and_semiconductor_industry }
		state = { start_privately_funded_building_construction = building_electronic_components_and_semiconductor_industry }
	}
	else_if = {
		limit = { is_building_type = building_robotics_industry }
		state = { start_privately_funded_building_construction = building_robotics_industry }
	}
	else_if = {
		limit = { is_building_type = building_advanced_material_fabricator }
		state = { start_privately_funded_building_construction = building_advanced_material_fabricator }
	}
	else_if = {
		limit = { is_building_type = building_launch_facility }
		state = { start_privately_funded_building_construction = building_launch_facility }
	}
	else_if = {
		limit = { is_building_type = building_space_mine }
		state = { start_privately_funded_building_construction = building_space_mine }
	}
	else_if = {
		limit = { is_building_type = building_steel_mills }
		state = { start_privately_funded_building_construction = building_steel_mills }
	}
	else_if = {
		limit = { is_building_type = building_food_industry }
		state = { start_privately_funded_building_construction = building_food_industry }
	}
	else_if = {
		limit = { is_building_type = building_glassworks }
		state = { start_privately_funded_building_construction = building_glassworks }
	}
	else_if = {
		limit = { is_building_type = building_tooling_workshops }
		state = { start_privately_funded_building_construction = building_tooling_workshops }
	}
	else_if = {
		limit = { is_building_type = building_paper_mills }
		state = { start_privately_funded_building_construction = building_paper_mills }
	}
	else_if = {
		limit = { is_building_type = building_shipyards }
		state = { start_privately_funded_building_construction = building_shipyards }
	}
	else_if = {
		limit = { is_building_type = building_military_shipyards }
		state = { start_privately_funded_building_construction = building_military_shipyards }
	}
	else_if = {
		limit = { is_building_type = building_arms_industry }
		state = { start_privately_funded_building_construction = building_arms_industry }
	}
	else_if = {
		limit = { is_building_type = building_artillery_foundries }
		state = { start_privately_funded_building_construction = building_artillery_foundries }
	}
	else_if = {
		limit = { is_building_type = building_munition_plants }
		state = { start_privately_funded_building_construction = building_munition_plants }
	}
	else_if = {
		limit = { is_building_type = building_arts_academy }
		state = { start_privately_funded_building_construction = building_arts_academy }
	}
	else_if = {
		limit = { is_building_type = building_railway }
		state = { start_privately_funded_building_construction = building_railway }
	}
	else_if = {
		limit = { is_building_type = fmc_building_construction_site }
		state = { start_privately_funded_building_construction = fmc_building_construction_site }
	}
}

expand_random_building = {
	random_scope_building = {
		limit = {
			weekly_profit > 0
			occupancy > 0.9
			OR = {
				is_building_type = building_textile_mills
				is_building_type = building_furniture_manufacturies
				is_building_type = building_synthetics_plants
				is_building_type = building_synthetics_plants_silk
				is_building_type = building_synthetics_plants_oil
				is_building_type = building_synthetics_plants_rubber
				is_building_type = building_synthetics_plants_opium
				is_building_type = building_synthetics_plants_coal
				is_building_type = building_synthetics_plants_wood
				is_building_type = building_synthetics_plants_sugar
				is_building_type = building_synthetics_plants_meat
				is_building_type = building_synthetics_plants_fruit
				is_building_type = building_synthetics_plants_drinks
				is_building_type = building_chemical_plants
				is_building_type = building_explosives_factory
				is_building_type = building_motor_industry
				is_building_type = building_car_industry
				is_building_type = building_electrics_industry
				is_building_type = building_electrics_industry_radio
				is_building_type = building_electrics_industry_appliances
				is_building_type = building_power_plant
				is_building_type = building_war_machine_industry
				is_building_type = building_aeroplanes_industry
				is_building_type = building_software_industry
				is_building_type = building_network_infrastructure
				is_building_type = building_nuclear_plant
				is_building_type = building_fusion_plant
				is_building_type = building_renewable_energy_plant
				is_building_type = building_electronic_components_and_semiconductor_industry
				is_building_type = building_robotics_industry
				is_building_type = building_advanced_material_fabricator
				is_building_type = building_launch_facility
				is_building_type = building_space_mine
				is_building_type = building_steel_mills
				is_building_type = building_food_industry
				is_building_type = building_glassworks
				is_building_type = building_tooling_workshops
				is_building_type = building_paper_mills
				is_building_type = building_shipyards
				is_building_type = building_military_shipyards
				is_building_type = building_arms_industry
				is_building_type = building_artillery_foundries
				is_building_type = building_munition_plants
				is_building_type = building_arts_academy
				is_building_type = building_railway
				is_building_type = fmc_building_construction_site
			}
		}
		while = {
			count = expand_levels
			expand_building_private_construction = yes
		}
	}
}

queue_more_private_investment = {
	if = {
		limit = {
			needed_private_levels > 0
			investment_pool > max_investment_pool_before_on_action
			has_wasted_construction = yes
		}
		while = {
			count = needed_private_levels
			expand_random_building = yes
		}
	}
}

recalculate_culture_acceptance_cost = {
	remove_modifier = accepted_cultures_cost
	add_modifier = {
		name = accepted_cultures_cost
		multiplier = {
			value = total_cultural_cost_script_value
		}
	}
}


accept_culture = {
	if = {
		limit = {
			is_target_in_variable_list = {
				name = unaccepted_cultures
				target = $CULTURE$
			}
		}
		remove_list_variable = {
			name = unaccepted_cultures
			target = $CULTURE$
		}
	}
	else = {
		add_to_variable_list = {
			name = accepted_cultures
			target = $CULTURE$
		}
	}
}

unaccept_culture = {
	if = {
		limit = {
			is_target_in_variable_list = {
				name = accepted_cultures
				target = $CULTURE$
			}
		}
		remove_list_variable = {
			name = accepted_cultures
			target = $CULTURE$
		}
	}
	else = {
		add_to_variable_list = {
			name = unaccepted_cultures
			target = $CULTURE$
		}
	}
	add_radicals = {  
		value = 0.25
		culture = $CULTURE$
	}  
}

change_acceptance = {
	if = {
		limit = {
			$CULTURE$ = {
				ROOT = {
					cultural_acceptance_base = {
						target = PREV
						value < 40
					}
				}
			}
		}
		accept_culture = {
			CULTURE = $CULTURE$
		}
	}
	else = {
		unaccept_culture = {
			CULTURE = $CULTURE$
		}
	}
}

reset_acceptance = {
	remove_variable = accepted_cultures
	remove_variable = unaccepted_cultures
	recalculate_culture_acceptance_cost = yes
}

update_countrys_bloc_principles_unity = {
	if = {
		limit = { is_power_bloc_leader = yes }
		power_bloc = {
			if = {
				limit = { has_principle = principle:principle_cultural_plurality_1 }
				remove_principle = principle_cultural_plurality_1
				add_principle = principle_cultural_unity_1
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_plurality_2 }
				remove_principle = principle_cultural_plurality_2
				add_principle = principle_cultural_unity_2
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_plurality_3 }
				remove_principle = principle_cultural_plurality_3
				add_principle = principle_cultural_unity_3
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_plurality_4 }
				remove_principle = principle_cultural_plurality_4
				add_principle = principle_cultural_unity_4
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_plurality_5 }
				remove_principle = principle_cultural_plurality_5
				add_principle = principle_cultural_unity_5
			}
		}
	}
}
update_countrys_bloc_principles_plurality = {
	if = {
		limit = { is_power_bloc_leader = yes }
		power_bloc = {
			if = {
				limit = { has_principle = principle:principle_cultural_unity_1 }
				remove_principle = principle_cultural_unity_1
				add_principle = principle_cultural_plurality_1
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_unity_2 }
				remove_principle = principle_cultural_unity_2
				add_principle = principle_cultural_plurality_2
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_unity_3 }
				remove_principle = principle_cultural_unity_3
				add_principle = principle_cultural_plurality_3
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_unity_4 }
				remove_principle = principle_cultural_unity_4
				add_principle = principle_cultural_plurality_4
			}
			else_if = {
				limit = { has_principle = principle:principle_cultural_unity_5 }
				remove_principle = principle_cultural_unity_5
				add_principle = principle_cultural_plurality_5
			}
		}
	}
}

nuclear_industrial_strike = {
	state_region = {
		add_devastation = 100
	}
	kill_population_percent_in_state = {
		percent = 0.1
	}
	add_modifier = {
		name = nuclear_strike_aftermath
		days = short_modifier_time
		is_decaying = yes
	}
	owner = {
		every_scope_war = {
			limit = {
				has_war_support = { target = PREV value > -65 } # cannot drop below -90
			}
			add_war_war_support = {
				target = PREV
				value = -25
			}
		}
	}
}

nuclear_first_stike = { # Scope is target state
	save_scope_as = target_state
	scope:attacking_country = {
		custom_tooltip = {
			text = nuke_success_chance_desc
		}
		custom_tooltip = {
			text = use_one_nuke_desc
			change_variable = {
				name = nuclear_weapon_stockpile
				subtract = 1
			}
		}
		random_list = {
			0 = {
				modifier = nuclear_strike_success_chance
				custom_tooltip = {
					text = industrial_nuke_succeeds_desc

					change_infamy = 25
					scope:target_state = {
						nuclear_industrial_strike = yes
						trigger_event = nuclear_weapon_events.1
					}
					scope:target_country = {
						change_relations = {
							country = ROOT
							value = -50  
						}
					}
					trigger_event = nuclear_weapon_events.2
					every_country = {
						limit = {
							NOT = { THIS = ROOT }
							NOT = { THIS = scope:target_country }
						}
						trigger_event = nuclear_weapon_events.15
					}
				}
			}
			0 = {
				modifier = nuclear_strike_fail_chance

				custom_tooltip = {
					text = industrial_nuke_fails_desc
					change_infamy = 5
					scope:target_state = {
						trigger_event = nuclear_weapon_events.3
					}
					scope:target_country = {
						change_relations = {
							country = ROOT
							value = -10  
						}
					}
					trigger_event = nuclear_weapon_events.4
				}
			}
		}
	}
}

nuclear_response_strike = {  # Scope is target state, target/attacking_country reversed as this is a response to first strike
	save_scope_as = target_state
	scope:target_country = {
		custom_tooltip = {
			text = use_one_nuke_desc
			change_variable = {
				name = nuclear_weapon_stockpile
				subtract = 1
			}
		}
		random_list = {
			0 = {
				modifier = nuclear_strike_success_chance

				custom_tooltip = {
					text = industrial_nuke_succeeds_desc
					scope:target_state = {
						nuclear_industrial_strike = yes
						trigger_event = nuclear_weapon_events.11
					}
					trigger_event = nuclear_weapon_events.12
					every_country = {
						limit = {
							NOT = { THIS = PREV }
							NOT = { THIS = scope:attacking_country }
						}
						trigger_event = nuclear_weapon_events.16
					}
				}
			}
			0 = {
				modifier = nuclear_strike_fail_chance
				custom_tooltip = {
					text = industrial_nuke_fails_desc
					scope:target_state = {
						trigger_event = nuclear_weapon_events.13
					}
					trigger_event = nuclear_weapon_events.14
				}
			}
		}
	}
}

nuclear_response_response_strike = {  # Scope is target state
	save_scope_as = target_state
	scope:attacking_country = {
		custom_tooltip = {
			text = use_one_nuke_desc
			change_variable = {
				name = nuclear_weapon_stockpile
				subtract = 1
			}
		}
		random_list = {
			0 = {
				modifier = nuclear_strike_success_chance

				custom_tooltip = {
					text = industrial_nuke_succeeds_desc
					scope:target_state = {
						nuclear_industrial_strike = yes
						trigger_event = nuclear_weapon_events.1
					}
					trigger_event = nuclear_weapon_events.2
					every_country = {
						limit = {
							NOT = { THIS = ROOT }
							NOT = { THIS = scope:target_country }
						}
						trigger_event = nuclear_weapon_events.15
					}
				}
			}
			0 = {
				modifier = nuclear_strike_fail_chance
				custom_tooltip = {
					text = industrial_nuke_fails_desc
					scope:target_state = {
						trigger_event = nuclear_weapon_events.3
					}
					trigger_event = nuclear_weapon_events.4
					every_country = {
						limit = {
							NOT = { THIS = ROOT.owner }
							NOT = { THIS = scope:target_country }
						}
						trigger_event = nuclear_weapon_events.15
					}
				}
			}
		}
	}
}

nuclear_tactical_strike = {
	state_region = {
		add_devastation = 25
	}
	kill_population_percent_in_state = {
		percent = 0.5
		pop_type = soldiers
	}
	kill_population_percent_in_state = {
		percent = 0.5
		pop_type = officers
	}
	kill_population_percent_in_state = {
		percent = 0.005
	}
	add_modifier = {
		name = tactical_nuke_aftermath
		days = short_modifier_time
		is_decaying = yes
	}

	trigger_event = nuclear_weapon_events.5
	scope:attacking_country = {
		trigger_event = nuclear_weapon_events.6
	}
}

trigger_mass_migration = {
	ordered_state = {
		limit = {
			NOT = { owner = { has_law = law_type:law_closed_borders } }
			state_cultural_acceptance = {
				target = scope:curr_culture
				value > owner.modifier:country_migration_restrictiveness_add
			}
		}
		order_by = migration_attraction_script_value

		save_scope_as = migration_target
	}
	move_partial_pop = {
		state = scope:migration_target
		population_ratio = $POP_RATIO$
	}
	scope:curr_state = {
		if = {
			limit = {
				NOT = { has_variable = sent_message }
			}
			post_notification = violence_against_minorities
			set_variable = sent_message
		}
	}
}

add_arable_land_effect = {
	state_region = {
		add_arable_land = PREV.$AMOUNT$
	}
	change_variable = {
		name = arable_land_added
		add = $AMOUNT$
	}
}

remove_all_ideologies = {
	remove_ideology = ideology_paternalistic
	remove_ideology = ideology_laissez_faire
	remove_ideology = ideology_individualist
	remove_ideology = ideology_stratocratic
	remove_ideology = ideology_oligarchic
	remove_ideology = ideology_pious
	remove_ideology = ideology_agrarian
	remove_ideology = ideology_particularist
	remove_ideology = ideology_isolationist
	remove_ideology = ideology_moralist
	remove_ideology = ideology_meritocratic
	remove_ideology = ideology_patriotic
	remove_ideology = ideology_loyalist
	remove_ideology = ideology_jingoist
	remove_ideology = ideology_liberal
	remove_ideology = ideology_anti_clerical
	remove_ideology = ideology_republican
	remove_ideology = ideology_proletarian
	remove_ideology = ideology_egalitarian
	remove_ideology = ideology_populist
	remove_ideology = ideology_socialist
	remove_ideology = ideology_reactionary
	remove_ideology = ideology_plutocratic
	remove_ideology = ideology_patriarchal
	remove_ideology = ideology_anti_slavery
	remove_ideology = ideology_pro_slavery
	remove_ideology = ideology_corporatist
	remove_ideology = ideology_patriarchal_suffrage
	remove_ideology = ideology_feminist_ig
	remove_ideology = ideology_modernizer
	remove_ideology = ideology_liberal_modern
	remove_ideology = ideology_egalitarian_modern
	remove_ideology = ideology_republican_paternalistic
	remove_ideology = ideology_scholar_paternalistic
	remove_ideology = ideology_junker_paternalistic
	remove_ideology = ideology_papal_paternalistic
	remove_ideology = ideology_papal_moralist
	remove_ideology = ideology_confucian
	remove_ideology = ideology_bakufu
	remove_ideology = ideology_shinto_moralist
	remove_ideology = ideology_caudillismo
	remove_ideology = ideology_austrian_hegemony
	remove_ideology = ideology_russian_patriarch
	remove_ideology = ideology_orthodox_patriarch
	remove_ideology = ideology_buddhist_moralist
	remove_ideology = ideology_hindu_moralist
	remove_ideology = ideology_sikh_moralist
	remove_ideology = ideology_oriental_orthodox_patriarch
	remove_ideology = ideology_heavenly_kingdom_theocratic
	remove_ideology = ideology_agrarian_jeffersonian
	remove_ideology = ideology_constitutionalist
	remove_ideology = ideology_orleanist
	remove_ideology = ideology_legitimist
	remove_ideology = ideology_bonapartist
}

remove_homelands_effect = {
	every_scope_culture = {
		limit = {
			ROOT = {
				culture_percent_state = {
					target = PREV
					value < homeland_culture_disappear_threshold
				}
			}
			NOT = { is_primary_culture_of = ROOT.owner }
			has_homeland = ROOT
		}
		save_scope_as = removal_culture
		ROOT = {
			state_region = {
				remove_homeland = scope:removal_culture
			}
			post_notification = homeland_removed
		}
	}
}

create_homelands_effect = {
	every_scope_culture = {
		limit = {
			ROOT = {
				culture_percent_state = {
					target = PREV
					value >= homeland_culture_form_threshold
				}
			}
			is_primary_culture_of = ROOT.owner
			NOT = { has_homeland = ROOT }
		}
		save_scope_as = form_culture
		ROOT = {
			state_region = {
				add_homeland = scope:form_culture
			}
			post_notification = homeland_created
		}
	}
}

set_decolonization_variable = {
	set_variable = decolonization_marker
	every_neighbouring_state = {
		limit = {
			NOT = { has_variable = decolonization_marker }
			any_scope_culture = {
				has_homeland = PREV
				has_homeland = scope:new_country_capital
			}
			owner = scope:new_country_capital.owner
			NOT = {
				is_homeland_of_country_cultures = owner
			}
			state_independence_movement_strength > state_independence_movement_strength_threshold
		}
		set_decolonization_variable = yes
	}
}

form_decolonized_country = { # scope is capital state of new country, must be a homeland of something
	save_scope_as = new_country_capital
	random_scope_culture = {
		limit = {
			has_homeland = scope:new_country_capital
		}
		save_scope_as = new_country_culture
	}
	
	random_list = {
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 0 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 30 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 60 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 90 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 120 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 150 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 180 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 210 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 240 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 270 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 300 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
		1 = {
			create_dynamic_country = {  
				origin = owner
				country_type = recognized  
				tier = principality  
				culture = scope:new_country_culture  
				religion = owner.religion 
				capital = THIS
				cede_state_trigger = {
					has_variable = decolonization_marker
				}
				color = hsv360{ 330 80 80 }
				on_created = {
					every_scope_state = {
						remove_variable = decolonization_marker
					}
					trigger_event = {id = minor_events_timelineextended.3 }
				}
			}
		}
	}
}

fix_incompatible_laws = {
	if = {
		limit = {
			OR = {
				has_law = law_type:law_landed_voting
				has_law = law_type:law_wealth_voting
				has_law = law_type:law_census_voting
				has_law = law_type:law_universal_suffrage
			}
			has_law = law_type:law_no_campaign_finance_laws
		}
		activate_law = law_type:law_unregulated_donations
	}
	if = {
		limit = {
			has_law = law_type:law_no_internet_policy
			has_technology_researched = world_wide_web
		}
		activate_law = law_type:law_unregulated_internet
	}
	if = {
		limit = {
			NOT = { has_technology_researched = post-scarcity_economy }
			has_law = law_type:law_post-scarcity
		}
		activate_law = law_type:law_universal_basic_income
	}
	if = {
		limit = {
			NOT = { has_technology_researched = universal_basic_income }
			has_law = law_type:law_universal_basic_income
		}
		activate_law = law_type:law_wage_subsidies
	}
}